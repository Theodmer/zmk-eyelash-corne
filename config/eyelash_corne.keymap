#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <behaviors/non_overlap.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

//======definitions========//
#define GRA 0
#define QWERTY 1
#define NUM 2
#define SYM 3
#define CONTROL 4

#define MO_TOG(layer) &mo_tog layer layer
#define AA(keycode) &ht_tp RA(keycode) keycode
#define CTRL(keycode) &ht_tp LG(keycode) LC(keycode)
//======definitions========//

//=========================//=========================/ Version: 2 /=========================//=========================//

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        control_layer {
            if-layers = <2 3>;
            then-layer = <4>;
        };
        
        control_layer_w {
            if-layers = <1 5>;
            then-layer = <6>;
        };
    };
};

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <240>;
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

//==================== COMBOS ====================//

/ {
    combos {
        compatible = "zmk,combos";
        combo_dot {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp DOT>;
        };
        combo_comma {
            timeout-ms = <50>;
            key-positions = <24 25>;
            bindings = <&kp COMMA>;
        };
        combo_minus {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp MINUS>;
        };
        combo_underscore {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp UNDER>;
        };
        combo_cut {
            timeout-ms = <50>;
            key-positions = <37 38>;
            bindings = <&kp LC(X)>;
        };
        combo_copy {
            timeout-ms = <50>;
            key-positions = <38 39>;
            bindings = <&kp LC(C)>;
        };
        combo_paste {
            timeout-ms = <50>;
            key-positions = <39 40>;
            bindings = <&kp LC(V)>;
        };
        combo_back {
            timeout-ms = <50>;
            key-positions = <29 30>;
            bindings = <&kp LC(Z)>;
        };
        combo_forward{
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp LC(LS(Z))>;
        };
    };
};

/ {
    behaviors {
//============--------------old ones-----------------==============
//==================== TAP DANCES ====================//
        tdq: tap_dance_quotation {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp SQT>, <&kp DQT>;
        };

        tdw: tap_dance_alt_win {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <250>;
                bindings = <&kp LALT>, <&kp LGUI>, <&kp LG(LALT)>;
        };
        tdcaps: tap_dance_shift_caps {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp LSHFT>, <&kp CAPS>;
        };
        
        tdbt: tap_dance_bluetooth {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&bt BT_SEL 0>, <&bt BT_SEL 1>, <&bt BT_SEL 2>;
        };

//==================== HOLD TAPS ====================//
        mo_tog: behavior_mo_tog {
                compatible = "zmk,behavior-hold-tap";
                #binding-cells = <2>;
                flavor = "hold-preferred";
                tapping-term-ms = <200>;
                bindings = <&mo>, <&tog>;
        };

        ht_tp: behavior_tap_preferred {
                compatible = "zmk,behavior-hold-tap";
                #binding-cells = <2>;
                tapping_term_ms = <240>;
                quick_tap_ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
        };

//==================== MOD MORPH ====================//
        blt: backspace_delete {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp BSPC>, <&kp DEL>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
        };
//=============----------new ones-----------==================
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&soft_off>;
            key-positions = <1 15 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "GRAPHITE";
            bindings = <

&kp TAB    &tdq      &kp L     &kp D     &kp W        &ht_tp COMMA DOT                    &kp UP                &kp FSLH  &kp F         AA(O)     AA(U)    &kp SEMI  &kp ESC
&tdcaps    &kp N     &kp R     &kp T     AA(S)        AA(G)                      &kp LEFT &kp ENTER  &kp RIGHT  &kp Y     &kp H         AA(A)     &kp E    AA(I)     &tdcaps
&kp LCTRL  &kp Q     &kp X     &kp M     AA(C)        &kp V            &kp SPACE          &kp DOWN              &kp K     &kp P         &kp B     &kp J    &kp Z     &mt RSFT RET
                               &tdw      MO_TOG(NUM)  &kp SPACE                                                 &blt      MO_TOG(SYM)   &kp RALT

            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        qwerty_layer {
            display-name = "QWERTY";
            bindings = <
&trans    &kp Q    &kp W     &kp E     &kp R      &kp T              &trans         &kp Y     &kp U     &kp I      &kp O    &kp P     &trans
&trans    &nkp A   &kp S     &nkp D    &kp F      &kp G       &trans &trans &trans  &kp H     &kp J     &kp K      &kp L    &kp SEMI  &trans
&trans    &kp Z    &kp X     &kp C     &kp V      &kp B    &trans    &trans         &kp N     &kp M     &kp COMMA  &kp DOT  &kp FSLH  &trans
                             &trans    &trans     &trans                            &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        number_layer {
            display-name = "NUMBER";
            bindings = <
&kp F1     &kp F2    &kp F3    &kp F4     &kp F5     &kp F6                        &mmv MOVE_UP                &none     &kp N7       &kp N8    &kp N9    &none     &tog NUM
&kp F7     &kp F8    &kp F9    &kp F10    &kp F11    &kp F12        &mmv MOVE_LEFT &mkp LCLK  &mmv MOVE_RIGHT  &none     &kp N4       &kp N5    &kp N6    &kp N0    &none
&trans     &none     &none     &none      &none      &none   &trans                &mmv MOVE_DOWN              &none     &kp N1       &kp N2    &kp N3    &none     &trans
                               &trans     &none      &trans                                                    &trans    MO_TOG(SYM)  &trans
            >;

            sensor-bindings = <&rgb_encoder>;
        };
        symbol_layer {
            display-name = "SYMBOL";
            bindings = <
&none    &kp SQT    &kp LT     &kp GT    &kp DQT      &kp GRAVE                       &msc SCRL_UP                &kp AMPS    &kp HASH    &kp LBKT    &kp RBKT    &kp PRCNT  &tog SYM
&none    &kp EXCL   &kp MINUS  &kp PLUS  &kp EQUAL    &kp MINUS        &msc SCRL_LEFT &mkp LCLK  &msc SCRL_RIGHT  &kp PIPE    &kp COLON   &kp LPAR    &kp RPAR    &kp QMARK  &none
&trans   &kp CARET  &kp FSLH   &kp STAR  &kp BSLH     &kp UNDER   &trans              &msc SCRL_DOWN              &kp TILDE   &kp DLLR    &kp LBRC    &kp RBRC    &kp AT     &trans
                                  &trans    MO_TOG(NUM)  &trans                                                   &trans      &none       &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        control_layer {
            display-name = "CONTROL";
            bindings = <
   &to QWERTY  &kp LC(LEFT)  &kp UP    &kp LC(RIGHT)  &none       &tdbt                           &kp C_VOL_UP                 &bt BT_CLR  &none       &kp C_BRI_DEC  &kp C_VOL_UP  &kp C_BRI_INC  &to GRA
   &kp LSHFT   &kp LEFT      &kp DOWN  &kp RIGHT      &none       &none            &kp C_PREV &kp C_PP  &kp C_NEXT  &soft_off  &none       &kp C_PREV  &kp C_PP       &kp C_NEXT     &tog QWERTY
   &kp LALT    &none         &none     CTRL(X)        CTRL(C)     CTRL(V)     &trans              &kp C_VOL_DN                 &none       &none       &none          &kp C_VOL_DN  CTRL(Z)        &mt RSFT RET
                                       &kp LCTRL      &none       &trans                                                       &trans      &none       &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
